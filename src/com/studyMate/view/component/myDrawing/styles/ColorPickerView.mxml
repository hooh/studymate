<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 creationComplete="group1_creationCompleteHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" >
	<!--WRITTEN by Duane Nickull.  (c) Copyright 2011 - all rights reserved with the following 
	    concessions.  
	
	    1. You are free to use to use this at your own risk in whatever way you think this will help you.
	    2. If you make improvements, please consider contributing back so others may benefit.
	    3. If something goes wrong, you are on your own.  No responsibility, warranty etc is implied.
	
	    Peace, love and may your code always compile on the first try!
	  -->
	<fx:Script>
		<![CDATA[				
			import mx.events.FlexEvent;
			[Bindable] private var colorValue:uint;     //var used  color in this class
			private var _newColor:String = new String(); // var used to assemble RGB values
			
			public static const colorChange:String="colorChange";
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				setColor();
			}
			
			// Utility to account for values that are 0-15 being one character and compensate
			// without this, 15 returns "f", hence 15, 15, 15 would be "fff" instead of 0f0f0f
			private function checkLength(s:String):String
			{
				var str:String = s;
				if (str.length < 2)
				{
					str = "0" + str;
				}
				return str;
			}
			
			private function setColor():void
			{
				var R:String = (rSlider.value).toString(16);
				R = checkLength(R);
				var G:String = (gSlider.value).toString(16);
				G = checkLength(G);
				var B:String = (bSlider.value).toString(16);
				B = checkLength(B);
				
				//If you need to access the "0xFFFFFF" string, use this
				newColor = "0x" + R + G + B; 
				trace("newColor = " + newColor);
				//If you need to access the uint value, use this
				colorValue = parseInt(newColor,16); 
				trace(colorValue);
				this.dispatchEvent(new Event(colorChange));
			}
			
			protected function setLineColor():void
			{
				// TODO: write your own settings class and persist the choice
				// EXAMPLE:
				// MySettingsClass.setColorOfLine(colorValue);
			}	

			public function get newColor():String
			{
				return _newColor;
			}

			public function set newColor(value:String):void
			{
				_newColor = value;
			}
			
			
		]]>
	</fx:Script>
	<!-- The following has been set to lay out properly in both landscape and portrait orientations -->
	<s:Button top="20" width="142" height="50" label="Set Color" click="setLineColor()"
			  horizontalCenter="-69"/>
	<!--This is only to give a visual of the color being mixed-->
	<s:Rect top="20" height="50" width="102" horizontalCenter="87" id="r">
		<s:fill>
			<s:SolidColor color="{colorValue}" />
		</s:fill>
	</s:Rect>
	
	<!--RED-->
	<s:Label left="20" top="88" width="63" height="30" fontSize="19" text="Red" textAlign="left"
			 verticalAlign="middle"/>
	<s:HSlider id="rSlider" left="91" right="10" top="88" height="30" change="setColor()"
			   maximum="254" minimum="0" stepSize="1"/>

	<!--GREEN-->
	<s:Label left="20" top="143" width="63" height="30" fontSize="19" text="Green" textAlign="left"
			 verticalAlign="middle"/>
	<s:HSlider id="gSlider" left="91" right="10" top="143" height="30" value="200" change="setColor()"
			   maximum="254" minimum="0" stepSize="1"/>
	
	<!--BLUE-->
	<s:Label left="20" top="198" width="63" height="30" fontSize="19" text="Blue" textAlign="left"
			 verticalAlign="middle"/>
	<s:HSlider id="bSlider" left="91" right="10" top="198" height="30" change="setColor()"
			   maximum="254" minimum="0" stepSize="1"/>
	
</s:Group>
